{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\riley\\\\source\\\\repos\\\\boeing-naturallanguageprocessing\\\\boeing\\\\src\\\\components\\\\modal_relationship_type.jsx\";\nimport React, { Component, Fragment } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalPopup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.isShowModal = status => {\n      this.handleClose();\n      this.setState({\n        showModal: status\n      });\n    };\n\n    this.handleClose = () => {\n      this.props.onPopupClose(false);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        relationship: event.target.value\n      });\n    };\n\n    this.handleChangeColor = event => {\n      this.setState({\n        color: event.target.value\n      });\n    };\n\n    this.handleEditLoad = () => {\n      this.setState({\n        relationship: Object.keys(this.props.relationshipTypes[this.props.row]),\n        color: Object.values(this.props.relationshipTypes[this.props.row])\n      });\n    };\n\n    this.handleCreateLoad = () => {\n      this.setState({\n        relationship: \"\",\n        color: \"#000000\"\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.props.type == \"newRelationshipType\" ? // Creating a new relationship type\n      this.props.createRelationshipType(this.state.color, this.state.relationship) : this.props.type == \"editRelationshipType\" ? // Editing an existing relationship type\n      this.props.editRelationshipType(this.state.color, this.state.relationship) : // Creating a new relationship line between 2 nodes\n      this.props.createRelationship(this.state.color, this.state.relationship);\n      this.handleClose();\n    };\n\n    this.handleChooseRelationship = event => {\n      let color;\n\n      for (let i = 0; i < this.props.relationshipTypes.length; i++) {\n        if (Object.keys(this.props.relationshipTypes[i]) == event.target.value) {\n          color = Object.values(this.props.relationshipTypes[i]).toString();\n        }\n      }\n\n      this.setState({\n        relationship: event.target.value,\n        color: color\n      });\n    };\n\n    this.handleDelete = () => {\n      this.props.deleteRelationshipType();\n      this.handleClose();\n    };\n\n    this.state = {\n      showModal: false,\n      relationship: \"\",\n      // Name of relationship\n      color: \"#000000\" // Color of relationship\n\n    };\n  } //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  //                       Modal Popup Functions\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n  render() {\n    return this.props.type == \"newRelationshipType\" ?\n    /*#__PURE__*/\n    // Creating a new relationship type\n    _jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.props.showModalPopup,\n        onHide: this.handleClose,\n        onShow: this.handleCreateLoad,\n        size: \"lg\",\n        \"aria-labelledby\": \"contained-modal-title-vcenter\",\n        centered: true,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            id: \"sign-in-title\",\n            children: \"Create a new relationship type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"string\",\n            value: this.state.relationship,\n            placeholder: \"New relationship name...\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            value: this.state.color,\n            onChange: this.handleChangeColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.handleSubmit(),\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this) : this.props.type == \"editRelationshipType\" ?\n    /*#__PURE__*/\n    // Editing a relationship type\n    _jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.props.showModalPopup,\n        onHide: this.handleClose,\n        onShow: this.handleEditLoad,\n        size: \"lg\",\n        \"aria-labelledby\": \"contained-modal-title-vcenter\",\n        centered: true,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            id: \"sign-in-title\",\n            children: \"Edit relationship\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"string\",\n            value: this.state.relationship,\n            placeholder: \"New relationship name...\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            value: this.state.color,\n            onChange: this.handleChangeColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.handleSubmit(),\n            children: \"Enter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 33\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.handleDelete(),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    // Creating a new relationship line between 2 nodes\n    _jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.props.showModalPopup,\n        onHide: this.handleClose,\n        size: \"lg\",\n        \"aria-labelledby\": \"contained-modal-title-vcenter\",\n        centered: true,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            id: \"sign-in-title\",\n            children: \"Choose relationship\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.relationship,\n            onChange: this.handleChooseRelationship,\n            children: this.props.relationshipTypes.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: Object.keys(option),\n              children: Object.keys(option)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 41\n            }, this) // Display current options from created relationshipTypes\n            )\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.handleSubmit(),\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\nexport default ModalPopup;","map":{"version":3,"sources":["C:/Users/riley/source/repos/boeing-naturallanguageprocessing/boeing/src/components/modal_relationship_type.jsx"],"names":["React","Component","Fragment","Modal","ModalPopup","constructor","props","isShowModal","status","handleClose","setState","showModal","onPopupClose","handleChange","event","relationship","target","value","handleChangeColor","color","handleEditLoad","Object","keys","relationshipTypes","row","values","handleCreateLoad","handleSubmit","type","createRelationshipType","state","editRelationshipType","createRelationship","handleChooseRelationship","i","length","toString","handleDelete","deleteRelationshipType","render","showModalPopup","map","option"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';  \r\nimport { Modal } from 'react-bootstrap';  \r\n\r\nclass ModalPopup extends Component {  \r\n    constructor(props) {  \r\n        super(props);  \r\n        this.state = {  \r\n            showModal: false,\r\n            relationship: \"\", // Name of relationship\r\n            color: \"#000000\" // Color of relationship\r\n        };  \r\n    }\r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //                       Modal Popup Functions\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n      \r\n    isShowModal = (status) => {  \r\n        this.handleClose();  \r\n        this.setState({ showModal: status});  \r\n    }  \r\n  \r\n    handleClose = () => {  \r\n        this.props.onPopupClose(false);  \r\n    }  \r\n\r\n    // Updates state when user changes name\r\n    handleChange = (event) => {\r\n        this.setState({relationship: event.target.value});\r\n    }\r\n    \r\n    // Updates state when user changes color\r\n    handleChangeColor = (event) => {\r\n        this.setState({color: event.target.value});\r\n    }\r\n\r\n    // Displays the currently selected relationship type when editing\r\n    handleEditLoad = () => {\r\n        this.setState({relationship: Object.keys(this.props.relationshipTypes[this.props.row]),\r\n                        color: Object.values(this.props.relationshipTypes[this.props.row])\r\n                    })\r\n    }\r\n\r\n    // Displays the default values when creating a new relationship type\r\n    handleCreateLoad = () => {\r\n        this.setState({relationship: \"\",\r\n                       color: \"#000000\"})\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.props.type == \"newRelationshipType\" ? // Creating a new relationship type\r\n            this.props.createRelationshipType(this.state.color, this.state.relationship)\r\n            :\r\n                this.props.type == \"editRelationshipType\" ? // Editing an existing relationship type\r\n                    this.props.editRelationshipType(this.state.color, this.state.relationship)\r\n                : // Creating a new relationship line between 2 nodes\r\n                    this.props.createRelationship(this.state.color, this.state.relationship)\r\n        this.handleClose();\r\n    }\r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //                       Relationship Functions\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n    // Updates state when user selects a relationship between 2 nodes\r\n    handleChooseRelationship = (event) => {\r\n        let color;\r\n        for(let i = 0; i < this.props.relationshipTypes.length; i++) {\r\n            if(Object.keys(this.props.relationshipTypes[i]) == event.target.value) {\r\n                color = (Object.values(this.props.relationshipTypes[i])).toString()\r\n            }\r\n        }\r\n\r\n        this.setState({relationship: event.target.value,\r\n                        color: color\r\n                    })\r\n    }\r\n\r\n    // Deletes a relationship type\r\n    handleDelete = () => {\r\n        this.props.deleteRelationshipType()\r\n        this.handleClose()\r\n    }\r\n\r\n    render() {  \r\n        return (  \r\n            this.props.type == \"newRelationshipType\" ? // Creating a new relationship type\r\n                <Fragment>  \r\n                    <Modal show={this.props.showModalPopup} onHide={this.handleClose} onShow={this.handleCreateLoad}\r\n                        size=\"lg\"  \r\n                        aria-labelledby=\"contained-modal-title-vcenter\"  \r\n                        centered>  \r\n                        <Modal.Header closeButton>  \r\n                            <Modal.Title id=\"sign-in-title\">  \r\n                                Create a new relationship type\r\n                            </Modal.Title>  \r\n                        </Modal.Header>  \r\n                        <Modal.Body>  \r\n                            <input type=\"string\" value={this.state.relationship} placeholder=\"New relationship name...\" onChange={this.handleChange}></input>\r\n                            <input type=\"color\" value={this.state.color} onChange={this.handleChangeColor}></input>\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <button onClick={() => this.handleSubmit()}>\r\n                                Create\r\n                            </button>\r\n                        </Modal.Body>\r\n                    </Modal>  \r\n                </Fragment>  \r\n                : \r\n                this.props.type == \"editRelationshipType\" ? // Editing a relationship type\r\n                    <Fragment>   \r\n                        <Modal show={this.props.showModalPopup} onHide={this.handleClose} onShow={this.handleEditLoad}\r\n                            size=\"lg\"  \r\n                            aria-labelledby=\"contained-modal-title-vcenter\"  \r\n                            centered>  \r\n                            <Modal.Header closeButton>  \r\n                                <Modal.Title id=\"sign-in-title\">  \r\n                                    Edit relationship\r\n                                </Modal.Title>  \r\n                            </Modal.Header>\r\n                            <Modal.Body>  \r\n                                <input type=\"string\" value={this.state.relationship} placeholder=\"New relationship name...\" onChange={this.handleChange}></input>\r\n                                <input type=\"color\" value={this.state.color} onChange={this.handleChangeColor}></input>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                <button onClick={() => this.handleSubmit()}>\r\n                                    Enter\r\n                                </button>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                <button onClick={() => this.handleDelete()}>\r\n                                    Delete\r\n                                </button>\r\n                            </Modal.Body>\r\n                        </Modal>  \r\n                    </Fragment>  \r\n                    : // Creating a new relationship line between 2 nodes\r\n                    <Fragment> \r\n                        <Modal show={this.props.showModalPopup} onHide={this.handleClose} \r\n                            size=\"lg\"  \r\n                            aria-labelledby=\"contained-modal-title-vcenter\"  \r\n                            centered>  \r\n                            <Modal.Header closeButton>  \r\n                                <Modal.Title id=\"sign-in-title\">  \r\n                                    Choose relationship\r\n                                </Modal.Title>  \r\n                            </Modal.Header>  \r\n                            <Modal.Body>  \r\n                                <select value={this.state.relationship} onChange={this.handleChooseRelationship}>\r\n                                    {this.props.relationshipTypes.map((option) => (\r\n                                        <option value={Object.keys(option)}>{Object.keys(option)}</option> // Display current options from created relationshipTypes\r\n                                    ))}\r\n                                </select>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                <button onClick={() => this.handleSubmit()}>\r\n                                    Select\r\n                                </button>\r\n                            </Modal.Body>\r\n                        </Modal>  \r\n                    </Fragment>  \r\n        );  \r\n    }  \r\n}  \r\n  \r\nexport default (ModalPopup);"]},"metadata":{},"sourceType":"module"}