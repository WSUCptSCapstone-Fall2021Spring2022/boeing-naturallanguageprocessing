{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\riley\\\\source\\\\repos\\\\boeing-naturallanguageprocessing\\\\boeing\\\\src\\\\components\\\\Taxonomy.js\";\nimport React from 'react';\nimport ModalPopup from './modal_relationship_type';\nimport Graph from 'vis-react'; //!! TODO: Create undo and redo array !!\n//!! TODO: Fix bug where user slected 2 nodes, then holds ctrl and drags a third node\n//!! TODO: Fix bug where user slected 2 nodes, one that had a relationship line, and one that does not\n//!! Nodes and relationship names must be unique !!\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//                       Graph Options\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: '#000000'\n  },\n  interaction: {\n    multiselect: true,\n    hover: true\n  }\n};\n\nclass Taxonomy extends React.Component {\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  //                       Modal Popup Functions\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  //                       Taxonomy Functions\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  constructor() {\n    super();\n\n    this.isShowPopup = (status, type, r) => {\n      this.setState({\n        showModalPopup: status,\n        type: type,\n        row: r\n      });\n    };\n\n    this.checkLineExists = () => {\n      let exists = \"FALSE\";\n\n      if (this.state.graph.edges.length != 0) {\n        for (let i = 0; i < this.state.graph.edges.length; i++) {\n          if ((this.state.graph.edges[i].from == this.state.node1 || this.state.graph.edges[i].from == this.state.node2) && ( // Checks if there is a realtionship line between the two nodes\n          this.state.graph.edges[i].to == this.state.node1 || this.state.graph.edges[i].to == this.state.node2)) {\n            exists = \"TRUE\";\n          }\n        }\n      }\n\n      if (exists == \"TRUE\") {\n        this.setState({\n          exists: true\n        });\n      } else {\n        this.setState({\n          exists: false\n        });\n      }\n    };\n\n    this.renderRelationshipTypes = () => {\n      const table = [];\n\n      for (let r = 0; r < Object.keys(this.state.relationshipTypes).length; r++) {\n        table.push(\n        /*#__PURE__*/\n        // Each table row is clickable to edit the relationship type (name and color)\n        _jsxDEV(\"tr\", {\n          className: \"centered\",\n          onClick: () => this.isShowPopup(true, \"editRelationshipType\", r),\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: Object.keys(this.state.relationshipTypes[r])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              color: Object.values(this.state.relationshipTypes[r])\n            },\n            children: Object.values(this.state.relationshipTypes[r])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }, this)]\n        }, r, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this));\n      }\n\n      return table;\n    };\n\n    this.createNode = () => {\n      let nodeID = this.state.nodeID + 1;\n      let newNodes = [...this.state.graph.nodes];\n      let newGraph = { ...this.state.graph\n      };\n      newNodes.push({\n        id: nodeID,\n        label: `Node ${nodeID}`,\n        color: '#e04141'\n      });\n      newGraph.nodes = newNodes;\n      this.setState({\n        nodeID: nodeID,\n        graph: newGraph,\n        graphID: this.state.graphID + 1\n      });\n    };\n\n    this.createRelationshipType = (color, relationship) => {\n      if (!this.checkRelationshipExists(relationship)) {\n        let newrelationshipTypes = [...this.state.relationshipTypes];\n        newrelationshipTypes.push({\n          [relationship]: color\n        });\n        this.setState({\n          relationshipTypes: newrelationshipTypes\n        });\n      }\n    };\n\n    this.createRelationship = (color, relationship) => {\n      let newEdges = [...this.state.graph.edges];\n      let newGraph = { ...this.state.graph\n      };\n\n      for (let i = 0; i < this.state.graph.edges.length; i++) {\n        // Removes edges if nodes already have an edge between them\n        if (this.state.graph.edges[i].from == this.state.nodes[0] && this.state.graph.edges[i].to == this.state.nodes[1] || this.state.graph.edges[i].from == this.state.nodes[1] && this.state.graph.edges[i].to == this.state.nodes[0]) {\n          newEdges.splice(i, 1);\n        }\n      }\n\n      newEdges.push({\n        from: this.state.node1,\n        to: this.state.node2,\n        color: color,\n        width: 3,\n        relationship: relationship\n      });\n      newGraph.edges = newEdges;\n      this.setState({\n        graph: newGraph,\n        graphID: this.state.graphID + 1,\n        nodes: []\n      });\n    };\n\n    this.checkRelationshipExists = relationship => {\n      if (relationship.toString() == \"\") {\n        return true;\n      }\n\n      if (this.state.relationshipTypes.length != 0) {\n        for (let i = 0; i < this.state.relationshipTypes.length; i++) {\n          if (Object.keys(this.state.relationshipTypes[i]) == relationship.toString()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    this.editRelationshipType = (color, relationship) => {\n      this.updateRelationshipType(color, relationship); // Updates the graph\n\n      let newrelationshipTypes = [...this.state.relationshipTypes]; // Updates the state\n\n      newrelationshipTypes[this.state.row] = {\n        [relationship]: color\n      };\n      this.setState({\n        relationshipTypes: newrelationshipTypes\n      });\n    };\n\n    this.updateRelationshipType = (color, relationship) => {\n      let edgesCopy = [...this.state.graph.edges];\n      let newGraph = { ...this.state.graph\n      };\n      let oldRelationship = Object.keys(this.state.relationshipTypes[this.state.row]); // Name of old relationship. Used to index which relationship lines need to be updated.\n\n      for (let i = 0; i < this.state.graph.edges.length; i++) {\n        if (this.state.graph.edges[i].relationship == oldRelationship) {\n          edgesCopy[i].color = color;\n          edgesCopy[i].relationship = relationship;\n        }\n      }\n\n      newGraph.edges = edgesCopy;\n      this.setState({\n        graph: newGraph,\n        graphID: this.state.graphID + 1\n      });\n    };\n\n    this.deleteRelationshipType = () => {\n      let edgesCopy = [...this.state.graph.edges];\n      let newGraph = { ...this.state.graph\n      };\n      let oldRelationship = Object.keys(this.state.relationshipTypes[this.state.row]); // Name of old relationship. Used to index which relationship lines need to be deleted.\n\n      edgesCopy = edgesCopy.filter(a => a.relationship !== oldRelationship.toString());\n      newGraph.edges = edgesCopy;\n      let newrelationshipTypes = [...this.state.relationshipTypes];\n      newrelationshipTypes.splice(this.state.row, 1);\n      this.setState({\n        relationshipTypes: newrelationshipTypes,\n        graph: newGraph,\n        graphID: this.state.graphID + 1\n      });\n    };\n\n    this.deleteEdge = () => {\n      let edgesCopy = [...this.state.graph.edges];\n      let newGraph = { ...this.state.graph\n      };\n\n      for (let i = 0; i < this.state.graph.edges.length; i++) {\n        if ((this.state.graph.edges[i].from == this.state.node1 || this.state.graph.edges[i].from == this.state.node2) && (this.state.graph.edges[i].to == this.state.node1 || this.state.graph.edges[i].to == this.state.node2)) {\n          edgesCopy.splice(i, 1);\n        }\n      }\n\n      newGraph.edges = edgesCopy;\n      this.setState({\n        graph: newGraph,\n        nodes: [],\n        graphID: this.state.graphID + 1\n      });\n    };\n\n    this.state = {\n      graphID: 0,\n      // ID for graph. Whenever the graph is updated, needs a new graphID to display changes\n      nodeID: 0,\n      // ID for nodes\n      relationshipTypes: [],\n      // List of relationship types\n      showModalPopup: false,\n      nodes: [],\n      // List of currently selected nodes\n      node1: -1,\n      // First node selected (Needed for relationship line direction)\n      node2: -1,\n      // Second node selected (Needed for relationship line direction)\n      type: \"\",\n      // Type of modal to be opened\n      graph: {\n        nodes: [],\n        edges: []\n      },\n      events: {\n        // Logic for selecting nodes\n        click: _ref => {\n          let {\n            nodes,\n            edges\n          } = _ref;\n\n          if (nodes.length == 2) {\n            // Two nodes are selected\n            if (this.state.node1 == -1) {\n              // Deals with bug where user drags a node instead of clicking and node is not added to nodes list\n              this.setState({\n                node1: nodes[0]\n              }); // Sets node1 to the first node in the list as default\n            }\n\n            let node2 = -1;\n\n            for (let i = 0; i < nodes.length; i++) {\n              // Deals with bug where user drags a node instead of clicking and node is not added to nodes list\n              if (nodes[i] != this.state.node1) {\n                node2 = nodes[i]; // Sets node2 to the other node in the list as default\n              }\n            }\n\n            this.setState({\n              nodes: nodes,\n              node2: node2\n            });\n            this.checkLineExists(); // Used to determine if the delete relationship line button should be enabled/disabled\n          } else if (nodes.length == 1) {\n            // Only the first node is selected\n            this.setState({\n              nodes: nodes,\n              node1: nodes[0] // Sets node1 to this selected node\n\n            });\n          } else {\n            // No nodes are selected\n            this.setState({\n              nodes: nodes\n            });\n          }\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    let nodes = [];\n    let newGraph = { ...this.state.graph\n    };\n    let nodeID = this.state.nodeID;\n\n    for (let r = 0; r < Object.keys(this.props.categories).length; r++) {\n      // Displays categories from last page as nodes in graph\n      nodeID = nodeID + 1;\n      nodes.push({\n        id: nodeID,\n        label: Object.keys(this.props.categories)[r],\n        color: '#e04141'\n      });\n    }\n\n    newGraph.nodes = nodes;\n    this.setState({\n      nodeID: nodeID,\n      graph: newGraph,\n      graphID: this.state.graphID + 1\n    });\n  } //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  //                       Graph Functions\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // Checks if there is a relationship line between the two selected nodes\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(ModalPopup, {\n        showModalPopup: this.state.showModalPopup,\n        type: this.state.type,\n        onPopupClose: this.isShowPopup,\n        relationshipTypes: this.state.relationshipTypes,\n        createRelationshipType: this.createRelationshipType,\n        createRelationship: this.createRelationship,\n        editRelationshipType: this.editRelationshipType,\n        deleteRelationshipType: this.deleteRelationshipType,\n        row: this.state.row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pageBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"categoriesUploadSection\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"categoriesLeft centered\",\n            children: [\"Hold ctrl or long-click to select second node\", /*#__PURE__*/_jsxDEV(Graph, {\n              graph: this.state.graph,\n              options: options,\n              events: this.state.events,\n              style: {\n                height: \"435px\"\n              }\n            }, this.state.graphID, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"categoriesCenter\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: () => this.createNode(),\n              children: \"Create New Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: () => this.isShowPopup(true, \"newRelationshipType\", -1),\n              children: \"Create New Relationship Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this), this.state.nodes.length == 2 ? this.state.relationshipTypes.length == 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: true,\n              className: \"btn\",\n              onClick: () => this.isShowPopup(true, \"newRelationshipLine\", -1),\n              children: \"Create New Relationship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: () => this.isShowPopup(true, \"newRelationshipLine\", -1),\n              children: \"Create New Relationship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: true,\n              className: \"btn\",\n              onClick: () => this.isShowPopup(true, \"newRelationshipLine\", -1),\n              children: \"Create New Relationship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 35\n            }, this), this.state.nodes.length == 2 ? this.state.exists == false ? /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: true,\n              className: \"btn\",\n              onClick: () => this.deleteEdge(),\n              children: \"Delete Relationship?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: () => this.deleteEdge(),\n              children: \"Delete Relationship?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: true,\n              className: \"btn\",\n              onClick: () => this.deleteEdge(),\n              children: \"Delete Relationship?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"categoriesRight centered\",\n            children: [\"Click to edit\", /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-hover tableBody tl\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                className: \"table-light\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"cell-align-middle centered tableHeader\",\n                    children: \"Relationship\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"cell-align-middle centered tableHeader\",\n                    children: \"Color\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 324,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: Object.keys(this.state.relationshipTypes).length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 41\n                }, this) : this.renderRelationshipTypes()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modeBtn\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn bottom4\",\n            onClick: () => this.props.prevPage(),\n            children: \" Back \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Taxonomy;","map":{"version":3,"sources":["C:/Users/riley/source/repos/boeing-naturallanguageprocessing/boeing/src/components/Taxonomy.js"],"names":["React","ModalPopup","Graph","options","layout","hierarchical","edges","color","interaction","multiselect","hover","Taxonomy","Component","constructor","isShowPopup","status","type","r","setState","showModalPopup","row","checkLineExists","exists","state","graph","length","i","from","node1","node2","to","renderRelationshipTypes","table","Object","keys","relationshipTypes","push","values","createNode","nodeID","newNodes","nodes","newGraph","id","label","graphID","createRelationshipType","relationship","checkRelationshipExists","newrelationshipTypes","createRelationship","newEdges","splice","width","toString","editRelationshipType","updateRelationshipType","edgesCopy","oldRelationship","deleteRelationshipType","filter","a","deleteEdge","events","click","componentDidMount","props","categories","render","height","prevPage"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ModalPopup from './modal_relationship_type';\r\nimport Graph from 'vis-react';\r\n\r\n\r\n//!! TODO: Create undo and redo array !!\r\n//!! TODO: Fix bug where user slected 2 nodes, then holds ctrl and drags a third node\r\n//!! TODO: Fix bug where user slected 2 nodes, one that had a relationship line, and one that does not\r\n//!! Nodes and relationship names must be unique !!\r\n\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//                       Graph Options\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nvar options = { \r\n    layout: {\r\n        hierarchical: false\r\n    },\r\n    edges: {\r\n        color: '#000000'\r\n    },\r\n    interaction: { multiselect: true, hover: true}\r\n};\r\n\r\nclass Taxonomy extends React.Component {\r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //                       Modal Popup Functions\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    isShowPopup = (status, type, r) => {  \r\n        this.setState({showModalPopup: status,\r\n                       type: type,\r\n                       row: r\r\n                    });  \r\n    };  \r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //                       Taxonomy Functions\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    constructor() {  \r\n        super();  \r\n        this.state = {  \r\n            graphID: 0, // ID for graph. Whenever the graph is updated, needs a new graphID to display changes\r\n            nodeID: 0, // ID for nodes\r\n            relationshipTypes: [], // List of relationship types\r\n            showModalPopup: false,\r\n            nodes: [], // List of currently selected nodes\r\n            node1: -1, // First node selected (Needed for relationship line direction)\r\n            node2: -1, // Second node selected (Needed for relationship line direction)\r\n            type: \"\", // Type of modal to be opened\r\n            graph: {\r\n              nodes: [],\r\n              edges: []\r\n            },\r\n            events: { // Logic for selecting nodes\r\n              click: ({ nodes, edges }) => {\r\n                  if(nodes.length == 2) { // Two nodes are selected\r\n\r\n                    if(this.state.node1 == -1) { // Deals with bug where user drags a node instead of clicking and node is not added to nodes list\r\n                        this.setState({node1: nodes[0]}) // Sets node1 to the first node in the list as default\r\n                    }\r\n\r\n                    let node2 = -1\r\n                    for(let i = 0; i < nodes.length; i++) {  // Deals with bug where user drags a node instead of clicking and node is not added to nodes list\r\n                        if(nodes[i] != this.state.node1) {\r\n                            node2 = nodes[i] // Sets node2 to the other node in the list as default\r\n                        }\r\n                    }\r\n\r\n                    this.setState({nodes: nodes,\r\n                                   node2: node2})\r\n                    this.checkLineExists() // Used to determine if the delete relationship line button should be enabled/disabled\r\n\r\n                  } else if (nodes.length == 1) { // Only the first node is selected\r\n                    this.setState({nodes: nodes,\r\n                                   node1: nodes[0] // Sets node1 to this selected node\r\n                                })\r\n                  } else { // No nodes are selected\r\n                    this.setState({nodes: nodes})\r\n                  }\r\n              }\r\n            }\r\n        }  \r\n    } \r\n\r\n    componentDidMount() {\r\n        let nodes = []\r\n        let newGraph = {...this.state.graph}\r\n        let nodeID = this.state.nodeID\r\n        for (let r = 0; r < Object.keys(this.props.categories).length; r++) { // Displays categories from last page as nodes in graph\r\n            nodeID = nodeID + 1\r\n            nodes.push({id: nodeID, label: Object.keys(this.props.categories)[r], color: '#e04141'})\r\n        }\r\n\r\n        newGraph.nodes = nodes\r\n        this.setState({\r\n            nodeID: nodeID,\r\n            graph: newGraph,\r\n            graphID: this.state.graphID + 1\r\n        })         \r\n    }\r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //                       Graph Functions\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n    // Checks if there is a relationship line between the two selected nodes\r\n    checkLineExists = () =>   {\r\n        let exists = \"FALSE\"\r\n        if(this.state.graph.edges.length != 0) {\r\n\r\n            for(let i = 0; i < this.state.graph.edges.length; i++) { \r\n\r\n                if((this.state.graph.edges[i].from == this.state.node1 || this.state.graph.edges[i].from == this.state.node2) && // Checks if there is a realtionship line between the two nodes\r\n                    (this.state.graph.edges[i].to == this.state.node1 || this.state.graph.edges[i].to == this.state.node2)) {\r\n                        exists = \"TRUE\"\r\n                    }\r\n            }\r\n        }\r\n\r\n        if (exists == \"TRUE\") {\r\n            this.setState({exists: true})\r\n        } else {\r\n            this.setState({exists: false})\r\n        }\r\n    }\r\n\r\n    // Displays the nodes and relationships in the graph\r\n    renderRelationshipTypes = () => {\r\n        const table = []\r\n        for (let r = 0; r < Object.keys(this.state.relationshipTypes).length; r++) {\r\n            table.push( // Each table row is clickable to edit the relationship type (name and color)\r\n                <tr key={r} className=\"centered\" onClick={() => this.isShowPopup(true, \"editRelationshipType\", r)}>\r\n                    <td>\r\n                        {Object.keys(this.state.relationshipTypes[r])}\r\n                    </td>\r\n                    <td style={{ color: Object.values(this.state.relationshipTypes[r]) }}>\r\n                        {Object.values(this.state.relationshipTypes[r])}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        }\r\n        return table;\r\n    }\r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //                       Node Functions\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    \r\n    // Creates a new node (For testing)\r\n    createNode = () => {\r\n        let nodeID = this.state.nodeID + 1\r\n        let newNodes = [...this.state.graph.nodes]\r\n        let newGraph = {...this.state.graph}\r\n\r\n        newNodes.push({id: nodeID, label: `Node ${nodeID}`, color: '#e04141'})\r\n        newGraph.nodes = newNodes\r\n\r\n        this.setState({nodeID: nodeID,\r\n                        graph: newGraph,\r\n                        graphID: this.state.graphID + 1\r\n                    })         \r\n    }\r\n\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    //                       Relationship Line Functions\r\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n    // Creates a new relationship type\r\n    createRelationshipType = (color, relationship) => {\r\n        if(!this.checkRelationshipExists(relationship)) {\r\n            let newrelationshipTypes = [...this.state.relationshipTypes]\r\n            newrelationshipTypes.push({[relationship]: color})\r\n            this.setState({relationshipTypes: newrelationshipTypes})\r\n        }\r\n    }\r\n\r\n    // Creates a relationship line between 2 nodes\r\n    createRelationship = (color, relationship) => {\r\n        let newEdges = [...this.state.graph.edges]\r\n        let newGraph = {...this.state.graph}\r\n\r\n        for(let i = 0; i < this.state.graph.edges.length; i++) { // Removes edges if nodes already have an edge between them\r\n            \r\n            if(this.state.graph.edges[i].from == this.state.nodes[0] && this.state.graph.edges[i].to == this.state.nodes[1]\r\n            || this.state.graph.edges[i].from == this.state.nodes[1] && this.state.graph.edges[i].to == this.state.nodes[0]) {\r\n                newEdges.splice(i, 1)\r\n            }\r\n        }\r\n\r\n        newEdges.push({from: this.state.node1, to: this.state.node2, color: color, width: 3, relationship: relationship})\r\n        newGraph.edges = newEdges\r\n        this.setState({graph: newGraph,\r\n                        graphID: this.state.graphID + 1,\r\n                        nodes: []\r\n                    })            \r\n    }\r\n\r\n    // The relationship name must be unique and not be an empty string\r\n    checkRelationshipExists = (relationship) => {\r\n        if(relationship.toString() == \"\") {\r\n            return true\r\n        }\r\n\r\n        if(this.state.relationshipTypes.length != 0) {\r\n\r\n            for(let i = 0; i < this.state.relationshipTypes.length; i++) {\r\n\r\n                if(Object.keys(this.state.relationshipTypes[i]) == relationship.toString()) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    // Edit relationships name and color\r\n    editRelationshipType = (color, relationship) => {\r\n        this.updateRelationshipType(color, relationship) // Updates the graph\r\n\r\n        let newrelationshipTypes = [...this.state.relationshipTypes] // Updates the state\r\n        newrelationshipTypes[this.state.row] = {[relationship]: color}\r\n\r\n        this.setState({relationshipTypes: newrelationshipTypes})\r\n    }\r\n\r\n    // Updates all relationship lines in graph with new relationship name and color\r\n    updateRelationshipType = (color, relationship) => {\r\n        let edgesCopy = [...this.state.graph.edges]\r\n        let newGraph = {...this.state.graph}\r\n        let oldRelationship = Object.keys(this.state.relationshipTypes[this.state.row]) // Name of old relationship. Used to index which relationship lines need to be updated.\r\n\r\n        for(let i = 0; i < this.state.graph.edges.length; i++) {\r\n            if(this.state.graph.edges[i].relationship == oldRelationship) {\r\n                edgesCopy[i].color = color\r\n                edgesCopy[i].relationship = relationship\r\n            }\r\n        }\r\n\r\n        newGraph.edges = edgesCopy\r\n        this.setState({graph: newGraph,\r\n                       graphID: this.state.graphID + 1\r\n                    })\r\n    }\r\n    \r\n    // Deletes relationship type and removes relationship lines\r\n    deleteRelationshipType = () => {\r\n        let edgesCopy = [...this.state.graph.edges]\r\n        let newGraph = {...this.state.graph}\r\n        let oldRelationship = Object.keys(this.state.relationshipTypes[this.state.row]) // Name of old relationship. Used to index which relationship lines need to be deleted.\r\n\r\n        edgesCopy = edgesCopy.filter(a => a.relationship !== oldRelationship.toString())\r\n        newGraph.edges = edgesCopy\r\n\r\n        let newrelationshipTypes = [...this.state.relationshipTypes]\r\n        newrelationshipTypes.splice(this.state.row, 1)\r\n\r\n        this.setState({relationshipTypes: newrelationshipTypes,\r\n                        graph: newGraph,\r\n                        graphID: this.state.graphID + 1\r\n                    })\r\n    }\r\n\r\n    // Deletes relationship line between nodes\r\n    deleteEdge = () => {\r\n        let edgesCopy = [...this.state.graph.edges]\r\n        let newGraph = {...this.state.graph}\r\n\r\n        for(let i = 0; i < this.state.graph.edges.length; i++) {\r\n            if((this.state.graph.edges[i].from == this.state.node1 || this.state.graph.edges[i].from == this.state.node2)\r\n                && (this.state.graph.edges[i].to == this.state.node1 || this.state.graph.edges[i].to == this.state.node2)) {\r\n                    edgesCopy.splice(i, 1)\r\n                }\r\n        }\r\n        \r\n        newGraph.edges = edgesCopy\r\n\r\n        this.setState({graph: newGraph,\r\n                       nodes: [],\r\n                       graphID: this.state.graphID + 1})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"page\">\r\n                <ModalPopup showModalPopup={this.state.showModalPopup}  \r\n                            type={this.state.type}\r\n                            onPopupClose={this.isShowPopup}\r\n                            relationshipTypes={this.state.relationshipTypes}\r\n                            createRelationshipType={this.createRelationshipType}\r\n                            createRelationship={this.createRelationship}\r\n                            editRelationshipType={this.editRelationshipType}\r\n                            deleteRelationshipType={this.deleteRelationshipType}\r\n                            row={this.state.row}\r\n                />\r\n                <div className=\"pageBox\">\r\n                    <div className=\"categoriesUploadSection\">\r\n                        <div className=\"categoriesLeft centered\">\r\n                            Hold ctrl or long-click to select second node\r\n                            <Graph key={this.state.graphID} graph={this.state.graph} options={options} events={this.state.events} style={{ height: \"435px\" }} />\r\n                        </div>\r\n                        <div className=\"categoriesCenter\">\r\n                            <button className=\"btn\" onClick={() => this.createNode()}>Create New Node</button>\r\n                            <button className=\"btn\" onClick={() => this.isShowPopup(true, \"newRelationshipType\", -1)}>Create New Relationship Type</button>\r\n                            {this.state.nodes.length == 2 ?\r\n                                this.state.relationshipTypes.length == 0 ?\r\n                                    <button disabled={true} className=\"btn\" onClick={() => this.isShowPopup(true, \"newRelationshipLine\", -1)}>Create New Relationship</button> :\r\n                                    <button className=\"btn\" onClick={() => this.isShowPopup(true, \"newRelationshipLine\", -1)}>Create New Relationship</button>\r\n                                : <button disabled={true} className=\"btn\" onClick={() => this.isShowPopup(true, \"newRelationshipLine\", -1)}>Create New Relationship</button>\r\n                            }\r\n                            {this.state.nodes.length == 2 ?\r\n                                this.state.exists == false ?\r\n                                    <button disabled={true} className=\"btn\" onClick={() => this.deleteEdge()}>Delete Relationship?</button> :\r\n                                    <button className=\"btn\" onClick={() => this.deleteEdge()}>Delete Relationship?</button>\r\n                                : <button disabled={true} className=\"btn\" onClick={() => this.deleteEdge()}>Delete Relationship?</button>\r\n                            }\r\n                        </div>\r\n                        <div className=\"categoriesRight centered\">\r\n                            Click to edit\r\n                            <table className=\"table table-hover tableBody tl\">\r\n                                <thead className=\"table-light\">\r\n                                    <tr>\r\n                                        <th className=\"cell-align-middle centered tableHeader\">Relationship</th>\r\n                                        <th className=\"cell-align-middle centered tableHeader\">Color</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {Object.keys(this.state.relationshipTypes).length === 0 ?\r\n                                        <tr>\r\n                                            <td></td>\r\n                                        </tr>\r\n                                        : this.renderRelationshipTypes()\r\n                                    } \r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"modeBtn\">\r\n                        <button className=\"btn bottom4\" onClick={() => this.props.prevPage()}> Back </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Taxonomy"]},"metadata":{},"sourceType":"module"}