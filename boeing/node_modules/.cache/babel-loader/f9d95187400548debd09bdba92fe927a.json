{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\riley\\\\source\\\\repos\\\\boeing-naturallanguageprocessing\\\\boeing\\\\src\\\\components\\\\App.js\";\nimport React from 'react';\nimport NavBar from './NavBar.js';\nimport Documents from './Documents.js';\nimport Terms from './Terms.js';\nimport Categories from './Categories.js';\nimport Taxonomy from './Taxonomy.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.Files = async () => {\n      if (this.state.input == \"\") {\n        console.log(\"NO INPUT\");\n        return false;\n      }\n\n      if (this.state.output == \"\") {\n        console.log(\"NO OUTPUT\");\n        return false;\n      }\n\n      let directories = {\n        input: this.state.input,\n        output: this.state.output\n      };\n      await fetch('/files', {\n        method: \"POST\",\n        headers: {\n          \"content_type\": \"application/json\"\n        },\n        body: JSON.stringify(directories)\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          files: data\n        });\n      });\n    };\n\n    this.Parser = async () => {\n      let directories = {\n        input: this.state.input,\n        output: this.state.output,\n        files: this.state.files\n      };\n      await fetch('/parse', {\n        method: \"POST\",\n        headers: {\n          \"content_type\": \"application/json\"\n        },\n        body: JSON.stringify(directories)\n      }).then(res => res.json()) //.then(data => {this.setState({dict: data})})\n      .then(this.getWeight()) // Runs parser then gets the weights after.\n      //.then(this.saveCorpus)\n      .then(this.saveCorpus()); // saves set of all noun/noun-phrases in corpus to a single csv \n    };\n\n    this.getWeight = async () => {\n      let input = {\n        input: this.state.output,\n        files: this.state.files\n      };\n      await fetch('/weights', {\n        method: \"POST\",\n        headers: {\n          \"content_type\": \"application/json\"\n        },\n        body: JSON.stringify(input)\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          weights: data\n        });\n      });\n    };\n\n    this.saveCorpus = async () => {\n      let input = {\n        output: this.state.output,\n        files: this.state.files,\n        corpusName: this.state.corpusName\n      }; //TODO: pass name of corpus to backend\n\n      await fetch('/saveCorpus', {\n        method: \"POST\",\n        headers: {\n          \"content_type\": \"application/json\"\n        },\n        body: JSON.stringify(input)\n      }).then(res => res.json()).then(data => {\n        console.log(\"SAVE CORPUS COMPLETE\");\n      });\n    };\n\n    this.createCategory = async name => {\n      const res = await fetch('/category', {\n        method: \"POST\",\n        headers: {\n          \"content_type\": \"application/json\"\n        },\n        body: JSON.stringify(name)\n      }).then(res => res.json());\n      const newCat = { ...this.state.categories\n      };\n      newCat[Object.keys(res)[0]] = Object.values(res)[0];\n      this.setState({\n        categories: newCat\n      }); // .then(res => res.json())\n      //     .then(data => {this.setState({categories: data})})\n    };\n\n    this.sendCategories = async cat => {\n      let inputInfo = {\n        input: this.state.output,\n        corpusName: this.state.corpusName,\n        data: this.state.categories\n      };\n      await fetch('/saveCategories', {\n        method: \"POST\",\n        headers: {\n          \"content_type\": \"application/json\"\n        },\n        body: JSON.stringify(inputInfo)\n      }).then(res => res.json()); //const newCat = {...this.state.categories}\n      //newCat[Object.keys(res)[0]] = Object.values(res)[0]\n      //this.setState({categories: newCat})\n    };\n\n    this.addToWeights = termsIndex => {\n      const toDelete = [];\n      const newCat = { ...this.state.categories\n      };\n      const newWeights = { ...this.state.weights\n      };\n\n      for (let r = 0; r < termsIndex.length; r++) {\n        toDelete.push([Object.keys(this.state.categories)[termsIndex[r][0]], Object.keys(Object.values(this.state.categories)[termsIndex[r][0]])[termsIndex[r][1]], Object.values(Object.values(this.state.categories)[termsIndex[r][0]])[termsIndex[r][1]]]);\n      }\n\n      for (let r = 0; r < toDelete.length; r++) {\n        newWeights[toDelete[r][1]] = toDelete[r][2];\n        delete newCat[toDelete[r][0]][toDelete[r][1]];\n      }\n\n      this.setState({\n        categories: newCat,\n        weights: newWeights\n      });\n    };\n\n    this.addToCategory = (termsIndex, cat) => {\n      const toAdd = [];\n      const newCat = { ...this.state.categories\n      };\n      const newWeights = { ...this.state.weights\n      };\n\n      for (let r = 0; r < termsIndex.length; r++) {\n        toAdd.push([Object.keys(this.state.categories)[cat], Object.keys(this.state.weights)[termsIndex[r]], Object.values(this.state.weights)[termsIndex[r]]]);\n      }\n\n      for (let r = 0; r < toAdd.length; r++) {\n        newCat[toAdd[r][0]][toAdd[r][1]] = toAdd[r][2];\n        delete newWeights[toAdd[r][1]];\n      }\n\n      this.setState({\n        categories: newCat,\n        weights: newWeights\n      });\n    };\n\n    this.deleteTerms = terms => {\n      const newWeights = { ...this.state.weights\n      };\n      const toDelete = [];\n\n      for (let r = 0; r < terms.length; r++) {\n        toDelete.push([Object.keys(this.state.weights)[terms[r]]]);\n      }\n\n      for (let r = 0; r < toDelete.length; r++) {\n        delete newWeights[toDelete[r]];\n      }\n\n      this.setState({\n        weights: newWeights\n      });\n    };\n\n    this.deleteFile = file => {\n      const newFiles = { ...this.state.files\n      };\n      delete newFiles[Object.keys(this.state.files)[file]];\n      this.setState({\n        files: newFiles\n      });\n    };\n\n    this.deleteCategory = cat => {\n      const newWeights = { ...this.state.weights\n      };\n      const newCat = { ...this.state.categories\n      };\n      const toAdd = [];\n\n      for (let r = 0; r < Object.keys(Object.values(this.state.categories)[cat]).length; r++) {\n        toAdd.push([Object.keys(Object.values(this.state.categories)[cat])[r], Object.values(Object.values(this.state.categories)[cat])[r]]);\n      }\n\n      for (let r = 0; r < Object.keys(toAdd).length; r++) {\n        newWeights[toAdd[r][0]] = toAdd[r][1];\n      }\n\n      delete newCat[Object.keys(this.state.categories)[cat]];\n      this.setState({\n        categories: newCat,\n        weights: newWeights\n      });\n    };\n\n    this.saveCategories = cats => {\n      this.sendCategories(cats);\n    };\n\n    this.nextPage = () => {\n      if (this.state.mode === 33) {\n        this.setState({\n          mode: 66\n        });\n      } else if (this.state.mode == 66) {\n        this.setState({\n          mode: 99\n        });\n      } else if (this.state.mode == 99) {\n        this.setState({\n          mode: 100\n        });\n      }\n    };\n\n    this.prevPage = () => {\n      if (this.state.mode === 100) {\n        this.setState({\n          mode: 99\n        });\n      } else if (this.state.mode == 99) {\n        this.setState({\n          mode: 66\n        });\n      } else if (this.state.mode == 66) {\n        this.setState({\n          mode: 33\n        });\n      }\n    };\n\n    this.setInput = input => {\n      this.setState({\n        input: input\n      });\n    };\n\n    this.setOutput = output => {\n      this.setState({\n        output: output\n      });\n    };\n\n    this.saveCorpusName = name => {\n      this.setState({\n        corpusName: name\n      });\n    };\n\n    this.state = {\n      //dict: {},\n      weights: {},\n      mode: 33,\n      // categories: {colors: {\"red\": {frequency: 1, weight: 1}, \"blue\": {frequency: 2, weight: 2}},\n      //              shapes: {\"square\": {frequency: 1, weight: 1}, \"circle\": {frequency: 2, weight: 2}}}\n      categories: {},\n      input: \"\",\n      output: \"\",\n      files: {},\n      corpusName: 'corpus'\n    };\n  } //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  //                       Route Functions\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // Route to run parser from input location and save to output location\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        mode: this.state.mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), this.state.mode === 33 ? /*#__PURE__*/_jsxDEV(Documents //dict={this.state.dict}\n      , {\n        nextPage: this.nextPage,\n        setInput: this.setInput,\n        setOutput: this.setOutput,\n        oldInput: this.state.input,\n        oldOutput: this.state.output,\n        Files: this.Files,\n        files: this.state.files,\n        deleteFile: this.deleteFile,\n        saveCorpusName: this.saveCorpusName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this) : this.state.mode === 66 ? /*#__PURE__*/_jsxDEV(Terms, {\n        Parser: this.Parser // dict={this.state.dict}\n        ,\n        nextPage: this.nextPage,\n        prevPage: this.prevPage,\n        getWeight: this.getWeight,\n        weights: this.state.weights //setOutput={this.setOutput}\n        ,\n        deleteTerms: this.deleteTerms //oldOutput={this.state.output}\n        ,\n        save: this.saveCorpus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 25\n      }, this) : this.state.mode === 99 ? /*#__PURE__*/_jsxDEV(Categories, {\n        getWeight: this.getWeight,\n        weights: this.state.weights,\n        nextPage: this.nextPage,\n        prevPage: this.prevPage,\n        createCategory: this.createCategory,\n        categories: this.state.categories,\n        addToWeights: this.addToWeights,\n        addToCategory: this.addToCategory,\n        saveCategories: this.saveCategories,\n        deleteCategory: this.deleteCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(Taxonomy, {\n        prevPage: this.prevPage,\n        categories: this.state.categories\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/riley/source/repos/boeing-naturallanguageprocessing/boeing/src/components/App.js"],"names":["React","NavBar","Documents","Terms","Categories","Taxonomy","App","Component","constructor","props","Files","state","input","console","log","output","directories","fetch","method","headers","body","JSON","stringify","then","res","json","data","setState","files","Parser","getWeight","saveCorpus","weights","corpusName","createCategory","name","newCat","categories","Object","keys","values","sendCategories","cat","inputInfo","addToWeights","termsIndex","toDelete","newWeights","r","length","push","addToCategory","toAdd","deleteTerms","terms","deleteFile","file","newFiles","deleteCategory","saveCategories","cats","nextPage","mode","prevPage","setInput","setOutput","saveCorpusName","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport Documents from './Documents.js'\r\nimport Terms from './Terms.js'\r\nimport Categories from './Categories.js'\r\nimport Taxonomy from './Taxonomy.js'\r\n\r\nclass App extends React.Component { \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //dict: {},\r\n                  weights: {},\r\n                  mode: 33,\r\n                  // categories: {colors: {\"red\": {frequency: 1, weight: 1}, \"blue\": {frequency: 2, weight: 2}},\r\n                  //              shapes: {\"square\": {frequency: 1, weight: 1}, \"circle\": {frequency: 2, weight: 2}}}\r\n                  categories: {},\r\n                  input: \"\",\r\n                  output: \"\",\r\n                  files: {},\r\n                  corpusName: 'corpus'\r\n                  };\r\n  }\r\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  //                       Route Functions\r\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  \r\n  // Route to run parser from input location and save to output location\r\n  Files = async() => {\r\n\r\n    if (this.state.input == \"\") {\r\n      console.log(\"NO INPUT\")\r\n      return false;\r\n    }\r\n    if (this.state.output == \"\") {\r\n      console.log(\"NO OUTPUT\")\r\n      return false;\r\n    }\r\n\r\n    let directories = {input: this.state.input,\r\n      output: this.state.output}\r\n    await fetch('/files', {\r\n      method: \"POST\",\r\n      headers:{\r\n          \"content_type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(directories)})\r\n        .then(res => res.json())\r\n          .then(data => {this.setState({files: data})})\r\n  }\r\n\r\n  // Route to run parser from input location and save to output location\r\n  Parser = async() => {\r\n    let directories = {input: this.state.input,\r\n      output: this.state.output,\r\n      files: this.state.files}\r\n    await fetch('/parse', {\r\n      method: \"POST\",\r\n      headers:{\r\n          \"content_type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(directories)})\r\n        .then(res => res.json())\r\n          //.then(data => {this.setState({dict: data})})\r\n            .then(this.getWeight()) // Runs parser then gets the weights after.\r\n\r\n              //.then(this.saveCorpus)\r\n\r\n              .then(this.saveCorpus()) // saves set of all noun/noun-phrases in corpus to a single csv \r\n\r\n  }\r\n\r\n  // Route to get weights from parser's output location\r\n  getWeight = async() => {\r\n    let input = {input: this.state.output,\r\n      files: this.state.files}\r\n\r\n    await fetch('/weights', {\r\n            method: \"POST\",\r\n            headers:{\r\n                \"content_type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(input)})\r\n                    .then(res => res.json())\r\n                      .then(data => {this.setState({weights: data})})\r\n  }\r\n\r\n  // Route to save noun-phrase, context, freq and weight of full corpus\r\n  saveCorpus = async() => {\r\n    let input = {output: this.state.output, \r\n      files: this.state.files, corpusName: this.state.corpusName} //TODO: pass name of corpus to backend\r\n\r\n    \r\n      await fetch('/saveCorpus', {\r\n        method: \"POST\",\r\n        headers:{\r\n            \"content_type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(input)})\r\n                .then(res => res.json())\r\n                  .then(data => {console.log(\"SAVE CORPUS COMPLETE\")})\r\n  }\r\n\r\n  // Route to create a new category\r\n  createCategory = async(name) => {\r\n    const res = await fetch('/category', {\r\n            method: \"POST\",\r\n            headers:{\r\n                \"content_type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(name)})\r\n                .then(res => res.json())\r\n\r\n    const newCat = {...this.state.categories}\r\n    newCat[Object.keys(res)[0]] = Object.values(res)[0]\r\n    this.setState({categories: newCat})\r\n              // .then(res => res.json())\r\n              //     .then(data => {this.setState({categories: data})})\r\n  }\r\n\r\n  //TODO!!!: save categories and pass to front end!!!\r\n  sendCategories = async(cat) => {\r\n    let inputInfo = {input: this.state.output, corpusName:this.state.corpusName, data:this.state.categories}\r\n    await fetch('/saveCategories', {\r\n      method: \"POST\",\r\n      headers:{\r\n          \"content_type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(inputInfo)})\r\n          .then(res => res.json())\r\n\r\n    //const newCat = {...this.state.categories}\r\n    //newCat[Object.keys(res)[0]] = Object.values(res)[0]\r\n    //this.setState({categories: newCat})\r\n  }\r\n\r\n  // TODO: Create route to add term to weights and remove from category\r\n  addToWeights = (termsIndex) => {\r\n    const toDelete = []\r\n    const newCat = {...this.state.categories}\r\n    const newWeights = {...this.state.weights}\r\n\r\n    for (let r = 0; r < termsIndex.length; r++) {\r\n      toDelete.push([Object.keys(this.state.categories)[termsIndex[r][0]], \r\n        Object.keys(Object.values(this.state.categories)[termsIndex[r][0]])[termsIndex[r][1]], \r\n        Object.values(Object.values(this.state.categories)[termsIndex[r][0]])[termsIndex[r][1]]])\r\n    }\r\n\r\n    for (let r = 0; r < toDelete.length; r++) {\r\n      newWeights[toDelete[r][1]] = toDelete[r][2]\r\n      delete newCat[toDelete[r][0]][toDelete[r][1]]\r\n    }\r\n    this.setState({categories: newCat,\r\n                   weights: newWeights})\r\n  }\r\n\r\n  // TODO: Create route to add term to category and remove from weights\r\n  addToCategory = (termsIndex, cat) => {\r\n    const toAdd = []\r\n    const newCat = {...this.state.categories}\r\n    const newWeights = {...this.state.weights}\r\n\r\n    for (let r = 0; r < termsIndex.length; r++) {\r\n      toAdd.push([Object.keys(this.state.categories)[cat], \r\n        Object.keys(this.state.weights)[termsIndex[r]], \r\n        Object.values(this.state.weights)[termsIndex[r]]])\r\n    }\r\n\r\n    for (let r = 0; r < toAdd.length; r++) {\r\n      newCat[toAdd[r][0]][toAdd[r][1]] = toAdd[r][2]\r\n      delete newWeights[toAdd[r][1]]\r\n    }\r\n    this.setState({categories: newCat,\r\n                   weights: newWeights})\r\n  }\r\n\r\n  // TODO: Create route to delete terms from parser output before running weights\r\n  deleteTerms = (terms) => {\r\n    const newWeights = {...this.state.weights}\r\n    const toDelete = []\r\n\r\n    for (let r = 0; r < terms.length; r++) {\r\n      toDelete.push([Object.keys(this.state.weights)[terms[r]]])\r\n    }\r\n\r\n    for (let r = 0; r < toDelete.length; r++) {\r\n      delete newWeights[toDelete[r]]\r\n    }\r\n    this.setState({weights: newWeights})\r\n  }\r\n\r\n  //TODO: Make deleting have a real effect\r\n  deleteFile = (file) => {\r\n    const newFiles = {...this.state.files}\r\n    delete newFiles[Object.keys(this.state.files)[file]]\r\n    this.setState({files: newFiles})\r\n  }\r\n\r\n  // TODO: Create route to delete a category and add its terms back to weight\r\n  deleteCategory = (cat) => {\r\n    const newWeights = {...this.state.weights}\r\n    const newCat = {...this.state.categories}\r\n    const toAdd = []\r\n\r\n    for (let r = 0; r < Object.keys(Object.values(this.state.categories)[cat]).length; r++) {\r\n      toAdd.push([Object.keys(Object.values(this.state.categories)[cat])[r], \r\n        Object.values (Object.values (this.state.categories) [cat]) [r]])\r\n    }\r\n\r\n    for (let r = 0; r < Object.keys(toAdd).length; r++) {\r\n      newWeights[toAdd[r][0]] = toAdd[r][1]\r\n    }\r\n\r\n    delete newCat[Object.keys(this.state.categories)[cat]]\r\n\r\n    this.setState({categories: newCat,\r\n                   weights: newWeights})\r\n  }\r\n\r\n  saveCategories = (cats) => {\r\n    this.sendCategories(cats)\r\n  }\r\n\r\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  //                       Webpage Functions\r\n  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n  // Moves to the next page in program\r\n  nextPage = () => {\r\n    if (this.state.mode === 33) {\r\n      this.setState({mode: 66})\r\n    } else if (this.state.mode == 66) {\r\n      this.setState({mode: 99})\r\n    } else if (this.state.mode == 99) {\r\n      this.setState({mode: 100})\r\n    }\r\n  }\r\n\r\n  // Moves back to previous page in program\r\n  prevPage = () => {\r\n    if (this.state.mode === 100) {\r\n      this.setState({mode: 99})\r\n    } else if (this.state.mode == 99) {\r\n      this.setState({mode: 66})\r\n    } else if (this.state.mode == 66) {\r\n      this.setState({mode: 33})\r\n    }\r\n  }\r\n\r\n  // Sets the input location for parser\r\n  setInput = (input) => {\r\n    this.setState({input: input})\r\n  }\r\n\r\n  // Sets the output location for parser\r\n  setOutput = (output) => {\r\n    this.setState({output: output})\r\n  }\r\n\r\n  //Sets the corpus name for csv\r\n  saveCorpusName = (name) => {\r\n    this.setState({corpusName: name})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <NavBar mode={this.state.mode}/>\r\n        {this.state.mode === 33 ? \r\n          <Documents \r\n          //dict={this.state.dict}\r\n                      nextPage={this.nextPage}\r\n                      setInput={this.setInput}\r\n                      setOutput={this.setOutput}\r\n                      oldInput={this.state.input}\r\n                      oldOutput={this.state.output}\r\n                      Files={this.Files}\r\n                      files={this.state.files}\r\n                      deleteFile={this.deleteFile}\r\n                      saveCorpusName={this.saveCorpusName}/> : \r\n                      \r\n                      this.state.mode === 66 ?\r\n                        <Terms Parser={this.Parser}\r\n                         // dict={this.state.dict}\r\n                          nextPage={this.nextPage}\r\n                          prevPage={this.prevPage}\r\n                          getWeight={this.getWeight}\r\n                          weights={this.state.weights}\r\n                          //setOutput={this.setOutput}\r\n                          deleteTerms={this.deleteTerms}\r\n                          //oldOutput={this.state.output}\r\n                          save={this.saveCorpus}\r\n                          /> :\r\n\r\n                          this.state.mode === 99 ?\r\n                            <Categories\r\n                              getWeight={this.getWeight}\r\n                              weights={this.state.weights}\r\n                              nextPage={this.nextPage}\r\n                              prevPage={this.prevPage}\r\n                              createCategory={this.createCategory}\r\n                              categories={this.state.categories}\r\n                              addToWeights={this.addToWeights}\r\n                              addToCategory={this.addToCategory}\r\n                              saveCategories={this.saveCategories}\r\n                              \r\n                              deleteCategory={this.deleteCategory}/> :\r\n                            <Taxonomy\r\n                              prevPage={this.prevPage}\r\n                              categories={this.state.categories}/>\r\n        }  \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}